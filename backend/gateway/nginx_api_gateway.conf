# Winyx API Gateway Configuration
# マイクロサービスアーキテクチャ用APIゲートウェイ設定

# ======== アップストリーム定義 ========

# UserService
upstream user_service {
    least_conn;  # 最小接続数による負荷分散
    server 127.0.0.1:8889 max_fails=3 fail_timeout=30s;
    # スケールアウト時の追加サーバー
    # server 127.0.0.1:8891 max_fails=3 fail_timeout=30s backup;
    keepalive 32;
}

# TestAPI Service
upstream test_api_service {
    least_conn;
    server 127.0.0.1:8888 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# OrderService (将来実装)
upstream order_service {
    least_conn;
    server 127.0.0.1:8890 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# NotificationService (将来実装)
upstream notification_service {
    least_conn;
    server 127.0.0.1:8892 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# AnalyticsService (将来実装)
upstream analytics_service {
    least_conn;
    server 127.0.0.1:8893 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# ======== レート制限ゾーン定義 ========

# IPアドレスベースのレート制限
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;

# APIキーベースのレート制限
limit_req_zone $http_x_api_key zone=api_key_limit:10m rate=1000r/s;

# ======== キャッシュゾーン定義 ========

proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;

# ======== APIゲートウェイサーバー設定 ========

server {
    listen 443 ssl http2;
    server_name api.winyx.jp;
    
    # SSL証明書設定
    ssl_certificate /etc/letsencrypt/live/api.winyx.jp/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.winyx.jp/privkey.pem;
    
    # SSL設定
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # セキュリティヘッダー
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # ログ設定
    access_log /var/log/nginx/api_gateway_access.log combined;
    error_log /var/log/nginx/api_gateway_error.log error;
    
    # ======== 共通設定 ========
    
    # リクエストボディサイズ制限
    client_max_body_size 10M;
    
    # タイムアウト設定
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # ======== ヘルスチェックエンドポイント ========
    
    location /health {
        access_log off;
        return 200 '{"status":"healthy","gateway":"nginx","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}';
        add_header Content-Type application/json;
    }
    
    # ======== メトリクスエンドポイント ========
    
    location /metrics {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    # ======== UserService ルーティング ========
    
    location ~ ^/api/v1/users {
        # レート制限
        limit_req zone=api_limit burst=20 nodelay;
        
        # 認証エンドポイントは別レート制限
        location ~ ^/api/v1/users/(login|register) {
            limit_req zone=auth_limit burst=5 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }
        
        # その他のUserServiceエンドポイント
        proxy_pass http://user_service;
        include /etc/nginx/conf.d/proxy_params.conf;
        
        # キャッシュ設定（GETリクエストのみ）
        proxy_cache api_cache;
        proxy_cache_methods GET HEAD;
        proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # ======== TestAPI ルーティング ========
    
    location ~ ^/api/v1/test {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://test_api_service;
        include /etc/nginx/conf.d/proxy_params.conf;
    }
    
    # ======== OrderService ルーティング ========
    
    location ~ ^/api/v1/orders {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://order_service;
        include /etc/nginx/conf.d/proxy_params.conf;
        
        # 注文作成は冪等性を保証
        location ~ ^/api/v1/orders$ {
            if ($request_method = POST) {
                proxy_set_header X-Idempotency-Key $http_x_idempotency_key;
            }
            proxy_pass http://order_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }
    }
    
    # ======== NotificationService ルーティング ========
    
    location ~ ^/api/v1/notifications {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://notification_service;
        include /etc/nginx/conf.d/proxy_params.conf;
    }
    
    # ======== AnalyticsService ルーティング ========
    
    location ~ ^/api/v1/analytics {
        limit_req zone=api_limit burst=50 nodelay;
        
        proxy_pass http://analytics_service;
        include /etc/nginx/conf.d/proxy_params.conf;
        
        # 分析データは長めにキャッシュ
        proxy_cache api_cache;
        proxy_cache_valid 200 30m;
        proxy_cache_valid 404 5m;
    }
    
    # ======== 内部サービス間通信 ========
    
    location ~ ^/internal/v1 {
        # 内部通信は外部からアクセス不可
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # サービス名でルーティング
        location ~ ^/internal/v1/users {
            proxy_pass http://user_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }
        
        location ~ ^/internal/v1/orders {
            proxy_pass http://order_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }
        
        location ~ ^/internal/v1/notifications {
            proxy_pass http://notification_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }
    }
    
    # ======== WebSocket対応 ========
    
    location ~ ^/ws/ {
        proxy_pass http://notification_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocketタイムアウト
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    # ======== エラーページ ========
    
    error_page 502 503 504 /50x.json;
    location = /50x.json {
        internal;
        return 503 '{"error":"Service temporarily unavailable","code":503}';
        add_header Content-Type application/json;
    }
    
    error_page 404 /404.json;
    location = /404.json {
        internal;
        return 404 '{"error":"Endpoint not found","code":404}';
        add_header Content-Type application/json;
    }
    
    # ======== CORS設定 ========
    
    # OPTIONS リクエストの処理
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key,X-Idempotency-Key' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }
}

# ======== HTTP→HTTPSリダイレクト ========

server {
    listen 80;
    server_name api.winyx.jp;
    
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}