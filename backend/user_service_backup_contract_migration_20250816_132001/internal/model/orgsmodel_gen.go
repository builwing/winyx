// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orgsFieldNames          = builder.RawFieldNames(&Orgs{})
	orgsRows                = strings.Join(orgsFieldNames, ",")
	orgsRowsExpectAutoSet   = strings.Join(stringx.Remove(orgsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orgsRowsWithPlaceHolder = strings.Join(stringx.Remove(orgsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrgsIdPrefix = "cache:orgs:id:"
)

type (
	orgsModel interface {
		Insert(ctx context.Context, data *Orgs) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Orgs, error)
		Update(ctx context.Context, data *Orgs) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrgsModel struct {
		sqlc.CachedConn
		table string
	}

	Orgs struct {
		Id        uint64    `db:"id"`
		Name      string    `db:"name"`
		OwnerId   uint64    `db:"owner_id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newOrgsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrgsModel {
	return &defaultOrgsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orgs`",
	}
}

func (m *defaultOrgsModel) Delete(ctx context.Context, id uint64) error {
	orgsIdKey := fmt.Sprintf("%s%v", cacheOrgsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, orgsIdKey)
	return err
}

func (m *defaultOrgsModel) FindOne(ctx context.Context, id uint64) (*Orgs, error) {
	orgsIdKey := fmt.Sprintf("%s%v", cacheOrgsIdPrefix, id)
	var resp Orgs
	err := m.QueryRowCtx(ctx, &resp, orgsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orgsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrgsModel) Insert(ctx context.Context, data *Orgs) (sql.Result, error) {
	orgsIdKey := fmt.Sprintf("%s%v", cacheOrgsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, orgsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.OwnerId)
	}, orgsIdKey)
	return ret, err
}

func (m *defaultOrgsModel) Update(ctx context.Context, data *Orgs) error {
	orgsIdKey := fmt.Sprintf("%s%v", cacheOrgsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orgsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.OwnerId, data.Id)
	}, orgsIdKey)
	return err
}

func (m *defaultOrgsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrgsIdPrefix, primary)
}

func (m *defaultOrgsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orgsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrgsModel) tableName() string {
	return m.table
}
