// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orgMembersFieldNames          = builder.RawFieldNames(&OrgMembers{})
	orgMembersRows                = strings.Join(orgMembersFieldNames, ",")
	orgMembersRowsExpectAutoSet   = strings.Join(stringx.Remove(orgMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orgMembersRowsWithPlaceHolder = strings.Join(stringx.Remove(orgMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrgMembersIdPrefix = "cache:orgMembers:id:"
)

type (
	orgMembersModel interface {
		Insert(ctx context.Context, data *OrgMembers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrgMembers, error)
		Update(ctx context.Context, data *OrgMembers) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrgMembersModel struct {
		sqlc.CachedConn
		table string
	}

	OrgMembers struct {
		Id        uint64    `db:"id"`
		OrgId     uint64    `db:"org_id"`
		UserId    uint64    `db:"user_id"`
		RoleId    int64     `db:"role_id"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newOrgMembersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrgMembersModel {
	return &defaultOrgMembersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`org_members`",
	}
}

func (m *defaultOrgMembersModel) Delete(ctx context.Context, id uint64) error {
	orgMembersIdKey := fmt.Sprintf("%s%v", cacheOrgMembersIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, orgMembersIdKey)
	return err
}

func (m *defaultOrgMembersModel) FindOne(ctx context.Context, id uint64) (*OrgMembers, error) {
	orgMembersIdKey := fmt.Sprintf("%s%v", cacheOrgMembersIdPrefix, id)
	var resp OrgMembers
	err := m.QueryRowCtx(ctx, &resp, orgMembersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orgMembersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrgMembersModel) Insert(ctx context.Context, data *OrgMembers) (sql.Result, error) {
	orgMembersIdKey := fmt.Sprintf("%s%v", cacheOrgMembersIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, orgMembersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.RoleId)
	}, orgMembersIdKey)
	return ret, err
}

func (m *defaultOrgMembersModel) Update(ctx context.Context, data *OrgMembers) error {
	orgMembersIdKey := fmt.Sprintf("%s%v", cacheOrgMembersIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orgMembersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.RoleId, data.Id)
	}, orgMembersIdKey)
	return err
}

func (m *defaultOrgMembersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrgMembersIdPrefix, primary)
}

func (m *defaultOrgMembersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orgMembersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrgMembersModel) tableName() string {
	return m.table
}
