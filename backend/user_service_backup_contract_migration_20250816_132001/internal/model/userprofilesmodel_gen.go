// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userProfilesFieldNames          = builder.RawFieldNames(&UserProfiles{})
	userProfilesRows                = strings.Join(userProfilesFieldNames, ",")
	userProfilesRowsExpectAutoSet   = strings.Join(stringx.Remove(userProfilesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userProfilesRowsWithPlaceHolder = strings.Join(stringx.Remove(userProfilesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWinyxCoreUserProfilesIdPrefix     = "cache:winyxCore:userProfiles:id:"
	cacheWinyxCoreUserProfilesUserIdPrefix = "cache:winyxCore:userProfiles:userId:"
)

type (
	userProfilesModel interface {
		Insert(ctx context.Context, data *UserProfiles) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserProfiles, error)
		FindOneByUserId(ctx context.Context, userId uint64) (*UserProfiles, error)
		Update(ctx context.Context, data *UserProfiles) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserProfilesModel struct {
		sqlc.CachedConn
		table string
	}

	UserProfiles struct {
		Id          uint64    `db:"id"`
		UserId      uint64    `db:"user_id"`      // ユーザーID
		AvatarUrl   string    `db:"avatar_url"`   // アバター画像URL
		Bio         string    `db:"bio"`          // 自己紹介
		Phone       string    `db:"phone"`        // 電話番号
		Address     string    `db:"address"`      // 住所
		BirthDate   time.Time `db:"birth_date"`   // 生年月日
		Gender      string    `db:"gender"`       // 性別
		Occupation  string    `db:"occupation"`   // 職業
		Website     string    `db:"website"`      // ウェブサイト
		SocialLinks string    `db:"social_links"` // ソーシャルメディアリンク
		Preferences string    `db:"preferences"`  // ユーザー設定
		CreatedAt   time.Time `db:"created_at"`   // 作成日時
		UpdatedAt   time.Time `db:"updated_at"`   // 更新日時
	}
)

func newUserProfilesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserProfilesModel {
	return &defaultUserProfilesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_profiles`",
	}
}

func (m *defaultUserProfilesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	winyxCoreUserProfilesIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesIdPrefix, id)
	winyxCoreUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, winyxCoreUserProfilesIdKey, winyxCoreUserProfilesUserIdKey)
	return err
}

func (m *defaultUserProfilesModel) FindOne(ctx context.Context, id uint64) (*UserProfiles, error) {
	winyxCoreUserProfilesIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesIdPrefix, id)
	var resp UserProfiles
	err := m.QueryRowCtx(ctx, &resp, winyxCoreUserProfilesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userProfilesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserProfilesModel) FindOneByUserId(ctx context.Context, userId uint64) (*UserProfiles, error) {
	winyxCoreUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesUserIdPrefix, userId)
	var resp UserProfiles
	err := m.QueryRowIndexCtx(ctx, &resp, winyxCoreUserProfilesUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userProfilesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserProfilesModel) Insert(ctx context.Context, data *UserProfiles) (sql.Result, error) {
	winyxCoreUserProfilesIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesIdPrefix, data.Id)
	winyxCoreUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userProfilesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.AvatarUrl, data.Bio, data.Phone, data.Address, data.BirthDate, data.Gender, data.Occupation, data.Website, data.SocialLinks, data.Preferences)
	}, winyxCoreUserProfilesIdKey, winyxCoreUserProfilesUserIdKey)
	return ret, err
}

func (m *defaultUserProfilesModel) Update(ctx context.Context, newData *UserProfiles) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	winyxCoreUserProfilesIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesIdPrefix, data.Id)
	winyxCoreUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userProfilesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.AvatarUrl, newData.Bio, newData.Phone, newData.Address, newData.BirthDate, newData.Gender, newData.Occupation, newData.Website, newData.SocialLinks, newData.Preferences, newData.Id)
	}, winyxCoreUserProfilesIdKey, winyxCoreUserProfilesUserIdKey)
	return err
}

func (m *defaultUserProfilesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWinyxCoreUserProfilesIdPrefix, primary)
}

func (m *defaultUserProfilesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userProfilesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserProfilesModel) tableName() string {
	return m.table
}
