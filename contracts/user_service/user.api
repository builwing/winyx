syntax = "v1"

info (
	title:   "Winyx User Service API"
	desc:    "ユーザー管理マイクロサービス - 認証・ユーザーCRUD・プロフィール・ロール管理"
	author:  "Winyx Team"
	version: "v1.0"
)

// ======== 共通型定義 ========
type (
	UserProfileData {
		Bio         string `json:"bio,optional"`
		Phone       string `json:"phone,optional"`
		Address     string `json:"address,optional"`
		BirthDate   string `json:"birth_date,optional"`
		Gender      string `json:"gender,optional"`
		Occupation  string `json:"occupation,optional"`
		Website     string `json:"website,optional"`
		SocialLinks string `json:"social_links,optional"`
	}
	UserInfo {
		UserId    int64            `json:"user_id"`
		Name      string           `json:"name"`
		Email     string           `json:"email"`
		Status    string           `json:"status"`
		Roles     []string         `json:"roles,omitempty"`
		Profile   *UserProfileData `json:"profile,omitempty"`
		CreatedAt string           `json:"created_at"`
		UpdatedAt string           `json:"updated_at"`
	}
)

// ======== 認証API ========
type (
	LoginReq {
		Email    string `json:"email" validate:"required,email"`
		Password string `json:"password" validate:"required"`
	}
	LoginRes {
		AccessToken string `json:"access_token"`
		ExpireTime  int64  `json:"expire_time"`
	}
	RegisterReq {
		Name     string `json:"name" validate:"required,min=2,max=50"`
		Email    string `json:"email" validate:"required,email"`
		Password string `json:"password" validate:"required,min=6"`
	}
	RegisterRes {
		Id    int64  `json:"id"`
		Name  string `json:"name"`
		Email string `json:"email"`
	}
)

// ======== ユーザー管理API ========
type (
	UserListReq {
		Page  int64 `form:"page,optional,default=1"`
		Limit int64 `form:"limit,optional,default=10"`
	}
	UserListRes {
		Users []UserInfo `json:"users"`
		Total int64      `json:"total"`
		Page  int64      `json:"page"`
		Limit int64      `json:"limit"`
	}
	UserDetailReq {
		UserId int64 `path:"id"`
	}
	UserDetailRes {
		User UserInfo `json:"user"`
	}
	UserCreateReq {
		Name     string           `json:"name" validate:"required"`
		Email    string           `json:"email" validate:"required,email"`
		Password string           `json:"password" validate:"required,min=6"`
		Status   string           `json:"status,optional"`
		Roles    []string         `json:"roles,optional"`
		Profile  *UserProfileData `json:"profile,optional"`
	}
	UserCreateRes {
		User UserInfo `json:"user"`
	}
	UserUpdateReq {
		UserId  int64            `path:"id"`
		Name    string           `json:"name" validate:"required"`
		Email   string           `json:"email" validate:"required,email"`
		Status  string           `json:"status,optional"`
		Roles   []string         `json:"roles,optional"`
		Profile *UserProfileData `json:"profile,optional"`
	}
	UserUpdateRes {
		User UserInfo `json:"user"`
	}
	UserDeleteReq {
		UserId int64 `path:"id"`
	}
	UserDeleteRes {
		Message string `json:"message"`
	}
)

// ======== プロフィール管理API ========
type (
	Request {
		Name string `path:"name,optional,default=you"`
	}
	Response {
		Message string `json:"message"`
	}
	UserInfoRes {
		Id    int64  `json:"id"`
		Name  string `json:"name"`
		Email string `json:"email"`
	}
)

// ======== サービス定義 ========
// 認証なしエンドポイント
service UserService {
	@handler LoginHandler
	post /api/v1/users/login (LoginReq) returns (LoginRes)

	@handler RegisterHandler
	post /api/v1/users/register (RegisterReq) returns (RegisterRes)
}

// 管理者専用エンドポイント（JWT認証必須）
@server (
	jwt:    Auth
	prefix: /api
)
service UserService {
	@handler UserListHandler
	get /v1/admin/users (UserListReq) returns (UserListRes)

	@handler UserDetailHandler
	get /v1/admin/users/:id (UserDetailReq) returns (UserDetailRes)

	@handler UserCreateHandler
	post /v1/admin/users (UserCreateReq) returns (UserCreateRes)

	@handler UserUpdateHandler
	put /v1/admin/users/:id (UserUpdateReq) returns (UserUpdateRes)

	@handler UserDeleteHandler
	delete /v1/admin/users/:id (UserDeleteReq) returns (UserDeleteRes)

	@handler UserInfoHandler
	get /user/info (Request) returns (Response)

	@handler UpdateProfileHandler
	post /user/profile (Request) returns (Response)
}

