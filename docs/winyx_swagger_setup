# Winyx Nginx Configuration - Swagger対応版
# /etc/nginx/sites-available/winyx

# レート制限設定
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/s;

# メインサイト (winyx.jp)
server {
    listen 80;
    server_name winyx.jp www.winyx.jp;

    # HTTPSへのリダイレクト
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name winyx.jp www.winyx.jp;

    # SSL設定
    ssl_certificate /etc/letsencrypt/live/winyx.jp/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/winyx.jp/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # セキュリティヘッダー
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # IPアドレス制限（環境変数から読み込み）
    #include /etc/nginx/conf.d/allowed_ips.conf;

    # ログ設定
    access_log /var/log/nginx/winyx_access.log combined;
    error_log /var/log/nginx/winyx_error.log debug;

    # API プロキシ設定（統一）
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;

        proxy_pass http://winyx_backend_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # タイムアウト設定
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # フロントエンド静的ファイル
    root /var/www/winyx/frontend/out;
    index index.html;

    # 静的ファイルのキャッシュ設定
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # APIドキュメント（既存）
    location /docs/ {
        alias /var/www/winyx/docs/swagger-ui/;
        try_files $uri $uri/ /index.html;
    }

    # ===== Swagger UI設定（新規追加） =====
    # 【重要】具体的なパス（/swagger/）を先に記述し、一般的なパス（/）より前に配置
    
    # /swagger（末尾スラッシュなし）を /swagger/ にリダイレクト
    location = /swagger {
        return 301 $scheme://$server_name/swagger/;
    }
    
    # Swagger UI
    location /swagger/ {
        alias /var/www/winyx/backend/swagger/;
        index index.html;
        try_files $uri $uri/ @swagger_fallback;
        
        # 本番環境では以下のアクセス制限を有効化することを推奨
        # allow 192.168.0.0/16;
        # allow 127.0.0.1;
        # deny all;
        
        # Basic認証を追加する場合（任意）
        # auth_basic "API Documentation";
        # auth_basic_user_file /etc/nginx/.htpasswd;
    }

    location @swagger_fallback {
        rewrite ^/swagger/(.*)$ /swagger/index.html last;
    }

    # OpenAPI仕様ファイル（APIドキュメント配信用）
    location /api/docs/ {
        alias /var/www/winyx/contracts/openapi/;
        try_files $uri $uri/ =404;
        
        # CORS設定（Swagger UIからのアクセスを許可）
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        
        # OPTIONSリクエストへの対応
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Type text/plain;
            add_header Content-Length 0;
            return 204;
        }
        
        # JSONファイル用のContent-Type
        location ~ \.json$ {
            add_header Content-Type application/json always;
            add_header Access-Control-Allow-Origin * always;
        }
        
        # YAMLファイル用のContent-Type
        location ~ \.(yaml|yml)$ {
            add_header Content-Type application/x-yaml always;
            add_header Access-Control-Allow-Origin * always;
        }
    }
    # ===== Swagger UI設定ここまで =====

    # SPAのフォールバック（最後に配置 - 全てのパスにマッチするため）
    location / {
        limit_req zone=general_limit burst=50 nodelay;
        try_files $uri $uri/ @fallback;
    }

    location @fallback {
        rewrite ^.*$ /index.html last;
    }
}

# API専用サブドメイン (api.winyx.jp)
server {
    listen 443 ssl http2;
    server_name api.winyx.jp;

    # SSL設定（メインと同じ）
    ssl_certificate /etc/letsencrypt/live/winyx.jp/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/winyx.jp/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;

    # IPアドレス制限（より厳格）
    #include /etc/nginx/conf.d/api_allowed_ips.conf;

    # APIへのプロキシ
    location / {
        limit_req zone=api_limit burst=10 nodelay;

        proxy_pass http://winyx_backend_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS設定
        add_header 'Access-Control-Allow-Origin' 'https://winyx.jp' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
    }
}

# ===== 設定適用手順 =====
# 1. このファイルの内容を /etc/nginx/sites-available/winyx にコピー：
#    sudo cp /var/www/winyx/docs/winyx_swagger_setup /etc/nginx/sites-available/winyx
#
# 2. 設定のシンタックスチェック：
#    sudo nginx -t
#
# 3. Nginxをリロード：
#    sudo systemctl reload nginx
#
# 4. アクセス確認：
#    - Swagger UI: https://winyx.jp/swagger/
#    - OpenAPI仕様: https://winyx.jp/api/docs/user_service.json
#
# ===== 注意事項 =====
# - 本番環境では /swagger/ のアクセス制限を有効化することを推奨
# - Basic認証を追加する場合は htpasswd コマンドで認証ファイルを作成：
#   sudo htpasswd -c /etc/nginx/.htpasswd admin
#
# ===== 修正内容 =====
# - location の順序を修正（具体的なパスを先に、一般的なパスを後に）
# - インデント修正（スペースに統一）
# - IP制限をコメントアウト（必要に応じて有効化）
# - エラーログレベルをdebugに変更（トラブルシューティング用）